generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String    @id(map: "user_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String?
  email     String?   @unique
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  isActive  Boolean?  @default(true)
  role      UserRole  @default(USER)
  accounts  Account[]
  sessions  Session[]

  // Relación inversa (opcional, pero útil para consultas)
  createdCountries           Country[]              @relation("CreatedBy")
  createdStates              State[]                @relation("CreatedBy")
  createdCities              City[]                 @relation("CreatedBy")
  createdCustomers           Customer[]             @relation("CreatedBy")
  cretedCheckTransactionType CheckTransactionType[] @relation("CreatedBy")
  createdCheckTransaction    CheckTransaction[]     @relation("CreatedBy")
  createdCompany             Company[]              @relation("CreatedBy")
  createdWireTransfer        WireTransfer[]         @relation("CreatedBy")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Country {
  id          String     @id @default(cuid())
  name        String     @unique
  code        String     @unique // Ej: "US", "MX"
  createdById String     @db.Uuid // Cambiado a Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  states      State[] // Relación 1 a muchos
  customer    Customer[] // Relación inversa
  // Relación con el usuario creador (obligatoria)
  createdBy   User       @relation(fields: [createdById], references: [id], name: "CreatedBy")
}

model State {
  id          String     @id @default(cuid())
  name        String
  code        String // Ej: "CA" (California), "JAL" (Jalisco)
  countryId   String
  country     Country    @relation(fields: [countryId], references: [id])
  cities      City[] // Relación 1 a muchos
  createdById String     @db.Uuid // Cambiado a Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customer    Customer[] // Relación inversa
  // Relación con el usuario creador (obligatoria)
  createdBy   User       @relation(fields: [createdById], references: [id], name: "CreatedBy")
}

model City {
  id          String     @id @default(cuid())
  name        String
  stateId     String
  state       State      @relation(fields: [stateId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customer    Customer[] // Relación inversa
  // Relación con el usuario creador (obligatoria)
  createdById String     @db.Uuid // Cambiado a Uuid
  createdBy   User       @relation(fields: [createdById], references: [id], name: "CreatedBy")
}

enum CustomerType {
  CUSTOMER
  RECIPIENT
}

model Customer {
  id               String             @id @default(cuid())
  code             String             @unique
  firstName        String
  middleName       String?
  lastNameOne      String
  lastNameTwo      String
  address          String
  apartment        String?
  // Claves foráneas
  countryId        String
  stateId          String
  cityId           String
  // Datos adicionales
  zipCode          String
  phone            String
  dob              DateTime
  ssn              String
  dlid             String
  imageUrl         String?
  percentage       Float              @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isActive         Boolean            @default(true)
  type             CustomerType       @default(CUSTOMER)
  notes            String?
  // Relaciones
  country          Country            @relation(fields: [countryId], references: [id])
  state            State              @relation(fields: [stateId], references: [id])
  city             City               @relation(fields: [cityId], references: [id])
  checkTransaction CheckTransaction[]
  WireTransfer     WireTransfer[]

  // Relación con el usuario creador (obligatoria)
  createdById String @db.Uuid // Cambiado a Uuid
  createdBy   User   @relation(fields: [createdById], references: [id], name: "CreatedBy")
}

model CheckTransactionType {
  id                String             @id @default(cuid())
  name              String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  checkTransactions CheckTransaction[] // Relación uno a muchos (inversa)
  // Relación con el usuario creador (obligatoria)
  createdById       String             @db.Uuid // Cambiado a Uuid
  createdBy         User               @relation(fields: [createdById], references: [id], name: "CreatedBy")
}

model CheckTransaction {
  id                     String               @id @default(cuid())
  // Claves foráneas
  customerId             String
  checkTransactionTypeId String
  // Datos adicionales
  numero                 String
  amount                 Float
  comision               Float
  userId                 String               @db.Uuid
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  // Relaciones
  customer               Customer             @relation(fields: [customerId], references: [id])
  checkTransactionType   CheckTransactionType @relation(fields: [checkTransactionTypeId], references: [id])

  // Relación con el usuario creador (obligatoria)
  createdById String @db.Uuid // Cambiado a Uuid
  createdBy   User   @relation(fields: [createdById], references: [id], name: "CreatedBy")
}

model Company {
  id           String         @id @default(cuid())
  name         String
  description  String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  // Relaciones
  wireTransfer WireTransfer[]

  // Relación con el usuario creador (obligatoria)
  createdById String @db.Uuid // Cambiado a Uuid
  createdBy   User   @relation(fields: [createdById], references: [id], name: "CreatedBy")
}

model WireTransfer {
  id         String   @id @default(cuid())
  // Claves foráneas
  customerId String
  companyId  String
  // Datos adicionales
  amount     Float
  userId     String   @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // Relaciones 
  customer   Customer @relation(fields: [customerId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])

  // Relación con el usuario creador (obligatoria)
  createdById String @db.Uuid // Cambiado a Uuid
  createdBy   User   @relation(fields: [createdById], references: [id], name: "CreatedBy")
}
